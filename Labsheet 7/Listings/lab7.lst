C51 COMPILER V9.60.7.0   LAB7                                                              03/06/2023 15:08:00 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LAB7
OBJECT MODULE PLACED IN .\Objects\lab7.obj
COMPILER INVOKED BY: C:\Users\ARYA AGARWAL\Desktop\KEIL SOFTWARE\C51\BIN\C51.EXE lab7.c OPTIMIZE(8,SPEED) BROWSE DEBUG O
                    -BJECTEXTEND PRINT(.\Listings\lab7.lst) TABS(2) OBJECT(.\Objects\lab7.obj)

line level    source

   1          #include <at89c5131.h>
   2          /*************************************************
   3            lcd.h: Header file for 16x2 LCD interfacing  
   4          **************************************************/
   5          
   6          //Functions contained in this header file
   7          void msdelay(unsigned int);                                 //fn takes integer value as an input and generates correspondi
             -ng delay in milli seconds
   8          void lcd_init(void);                                        //Initialize LCD
   9          void lcd_cmd(unsigned int i);                               //Sends commands to lcd
  10          void lcd_char(unsigned char ch);                            //display character on a lcd corresponding to input ascii
  11          void lcd_write_string(unsigned char *s);                    //takes pointer of a string which ends with null and dis
             -play on a lcd 
  12          
  13          
  14          //Signals to LCD
  15          sbit RS=P0^0; //Register select
  16          sbit RW=P0^1; //Read from or write to register
  17          sbit EN=P0^2; //Enable pin of lcd
  18          
  19          
  20          //Function definitions
  21          /************************************************
  22             lcd_init():
  23            Initializes LCD port and 
  24            LCD display parameters
  25          ************************************************/
  26          void lcd_init(void)
  27          {
  28   1        P2=0x00;
  29   1        EN=0;
  30   1        RS=0;
  31   1        RW=0;
  32   1        
  33   1        lcd_cmd(0x38);  // Function set: 2 Line, 8-bit, 5x7 dots
  34   1        msdelay(4);
  35   1        lcd_cmd(0x06);  // Entry mode, auto increment with no shift
  36   1        msdelay(4);
  37   1        lcd_cmd(0x0C);  // Display on, Curson off
  38   1        msdelay(4);
  39   1        lcd_cmd(0x01);  // LCD clear
  40   1        msdelay(4);
  41   1        lcd_cmd(0x80);  //Move cursor to Row 1 column 0
  42   1      }
  43          
  44          /**********************************************************
  45             msdelay(<time_val>): 
  46            Delay function for delay value <time_val>ms
  47          ***********************************************************/  
  48          void msdelay(unsigned int time)
  49          {
  50   1        int i,j;
  51   1        for(i=0;i<time;i++)
  52   1        {
C51 COMPILER V9.60.7.0   LAB7                                                              03/06/2023 15:08:00 PAGE 2   

  53   2          for(j=0;j<382;j++);
  54   2        }
  55   1      }
  56          
  57          /**********************************************************
  58              lcd_cmd(<char command>):
  59            Sends 8 bit command
  60            LCD display parameters
  61          ***********************************************************/  
  62          void lcd_cmd(unsigned int i)
  63          {
  64   1        RS=0;
  65   1        RW=0;
  66   1        EN=1;
  67   1        P2=i;
  68   1        msdelay(10);
  69   1        EN=0;
  70   1      }
  71          
  72          
  73          /**********************************************************
  74             lcd_write_char(<char data>):
  75            Sends 8 bit character(ASCII)
  76            to be printed on LCD
  77          ***********************************************************/  
  78          void lcd_write_char(unsigned char ch)
  79          {
  80   1        RS=1;
  81   1        RW=0;
  82   1        EN=1;
  83   1        P2=ch;
  84   1        msdelay(10);
  85   1        EN=0;
  86   1      }
  87          
  88          
  89          /***********************************************************
  90            lcd_write_string(<string pointer>):
  91            Prints string on LCD. Requires string pointer 
  92            as input argument.
  93          ***********************************************************/  
  94          void lcd_write_string(unsigned char *s)
  95          {
  96   1        while(*s!='\0')
  97   1        {
  98   2          lcd_write_char(*s++);
  99   2        }
 100   1      }
 101          
 102          code unsigned char correct_password[]="15A8*D6#";
 103          code unsigned char display_msg1[]=" ENTER PASSWORD ";
 104          code unsigned char display_msg2[]="CORRECT PASSWORD";
 105          code unsigned char display_msg3[]=" ACCESS GRANTED ";
 106          code unsigned char display_msg4[]=" WRONG PASSWORD ";
 107          code unsigned char display_msg5[]=" ACCESS DENIED  ";
 108          int row,col;
 109          bit flag = 0;
 110          char keypad[4][4] = {
 111              {'1', '2', '3', 'A'},
 112              {'4', '5', '6', 'B'},
 113              {'7', '8', '9', 'C'},
 114              {'*', '0', '#', 'D'}
C51 COMPILER V9.60.7.0   LAB7                                                              03/06/2023 15:08:00 PAGE 3   

 115          };
 116          
 117          char input_string[8];
 118          
 119            unsigned char char_read;
 120            int i;
 121            
 122            char keypad_scan()
 123          {
 124   1        P3 = 0x0F;
 125   1        while ( P3 != 0x0F)
 126   1        {}
 127   1          while (P3 == 0x0F)
 128   1          {}
 129   1            msdelay(20);
 130   1            if (P3_0 == 0) {
 131   2              col = 3;
 132   2              }
 133   1            if( P3_1 == 0){
 134   2              col = 2;}
 135   1           if ( P3_2 == 0){
 136   2              col = 1;}
 137   1           if ( P3_3 == 0 ){
 138   2              col = 0;}
 139   1            P3 = 0x0F;
 140   1            P3_4 = 0;
 141   1            P3_5 = 1;
 142   1            P3_6 = 1;
 143   1            P3_7 = 1;
 144   1          if ( P3 != 0xEF){
 145   2              row = 0;}
 146   1            P3_4 = 1;
 147   1            P3_5 = 0;
 148   1            P3_6 = 1;
 149   1            P3_7 = 1;
 150   1          if ( P3 != 0xDF){
 151   2              row = 1;}
 152   1            P3_4 = 1;
 153   1            P3_5 = 1;
 154   1            P3_6 = 0;
 155   1            P3_7 = 1;
 156   1          if ( P3 != 0xBF){
 157   2              row = 2;}
 158   1            P3_4 = 1;
 159   1            P3_5 = 1;
 160   1            P3_6 = 1;
 161   1            P3_7 = 0;
 162   1          if ( P3 != 0x7F){
 163   2              row = 3;}
 164   1          
 165   1            return keypad[row][col];
 166   1            }
 167          
 168          void main()
 169          {
 170   1        ACC=&input_string;
 171   1        lcd_init();
 172   1        lcd_cmd(0x80);                          //Move cursor to first line
 173   1        lcd_write_string(display_msg1);         //Starting program
 174   1        
 175   1        for (i=0 ; i<8; ++i)
 176   1        {
C51 COMPILER V9.60.7.0   LAB7                                                              03/06/2023 15:08:00 PAGE 4   

 177   2          char_read = keypad_scan();
 178   2          input_string[i]= char_read;
 179   2          lcd_cmd(0xC0); // Move the cursor to the second row
 180   2          lcd_write_string(input_string); // Display the character on the LCD
 181   2        }
 182   1        for( i=0 ;i<8;++i)
 183   1        {
 184   2          if(input_string[i] == correct_password[i])
 185   2            flag = 0;
 186   2          else 
 187   2            flag = 1;
 188   2        }
 189   1        if (flag == 0){
 190   2          lcd_cmd(0x80);                          //Move cursor to first line
 191   2        lcd_write_string(display_msg2);
 192   2          lcd_cmd(0xC0); // Move the cursor to the second row
 193   2          lcd_write_string(display_msg3); // Display the character on the LCD
 194   2          msdelay(8000);
 195   2        } 
 196   1        else 
 197   1        {
 198   2          lcd_cmd(0x80);                          //Move cursor to first line
 199   2        lcd_write_string(display_msg4);
 200   2          lcd_cmd(0xC0); // Move the cursor to the second row
 201   2          lcd_write_string(display_msg5); // Display the character on the LCD
 202   2          msdelay(8000);
 203   2        }
 204   1      }
 205          
 206          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    502    ----
   CONSTANT SIZE    =     94    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     31       3
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
